import crypto from "crypto";
import { prisma } from "@/prisma/prisma-client";
import { OrderSuccessTemplate } from "@/shared/components/shared/email-temapltes/order-success";
import { sendEmail } from "@/shared/lib";
import { CartItemDTO } from "@/shared/services/dto/cart.dto";
import { OrderStatus } from "@prisma/client";
import { NextRequest, NextResponse } from "next/server";

export async function POST(req: NextRequest) {
  try {
    const { data, signature } = await req.json();

    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø—ñ–¥–ø–∏—Å –≤—ñ–¥ LiqPay
    const expectedSignature = crypto
      .createHash("sha1")
      .update(process.env.LIQPAY_PRIVATE_KEY + data + process.env.LIQPAY_PRIVATE_KEY)
      .digest("base64");

    if (expectedSignature !== signature) {
      return NextResponse.json({ error: "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π –ø—ñ–¥–ø–∏—Å" }, { status: 400 });
    }

    // –†–æ–∑—à–∏—Ñ—Ä–æ–≤—É—î–º–æ –¥–∞–Ω—ñ
    const decodedData = JSON.parse(Buffer.from(data, "base64").toString("utf8"));

    const orderId = Number(decodedData.order_id);
    const status = decodedData.status; // success, failure, sandbox, etc.

    const order = await prisma.order.findFirst({
      where: { id: orderId },
    });

    if (!order) {
      return NextResponse.json({ error: "–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ" }, { status: 404 });
    }

    // –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç—É—Å –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
    const isSucceeded = status === "success" || status === "sandbox";

    await prisma.order.update({
      where: { id: order.id },
      data: {
        status: isSucceeded ? OrderStatus.SUCCEEDED : OrderStatus.CANCELLED,
      },
    });

    // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ª–∏—Å—Ç –ø—Ä–∏ —É—Å–ø—ñ—à–Ω—ñ–π –æ–ø–ª–∞—Ç—ñ
    if (isSucceeded) {
      const items = JSON.parse(order.items as string) as CartItemDTO[];

      await sendEmail(
        order.email,
        `–ú–∞–π—Å—Ç–µ—Ä –ü—ñ—Ü–∞ / –í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è #${order.id} —É—Å–ø—ñ—à–Ω–æ –æ–ø–ª–∞—á–µ–Ω–æ üéâ`,
        OrderSuccessTemplate({ orderId: order.id, items })
      );
    }

    return NextResponse.json({ success: true });
  } catch (error) {
    console.error("[LiqPay Callback Error]", error);
    return NextResponse.json({ error: "–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" }, { status: 500 });
  }
}
